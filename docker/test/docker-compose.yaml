version: '3.8'

services:
  redis-cache:
    image: redis
    container_name: redis-server
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - nitesh-network  # Connect to the custom network
  
  postgres:
    image: postgres:15.4-alpine # Use the latest version or your preferred version
    container_name: postgresdb-server
    ports:
      - "5432:5432" # Map port 5432 on the host to port 5432 in the container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}	          # Set your desired username
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Set your desired password
      POSTGRES_DB: ${POSTGRES_DB}        # Set your desired database name
    command: postgres -c 'max_connections=1000'
    volumes:
      - /data/postgres:/var/lib/postgresql/data  # Single volume for all PostgreSQL data
    networks:
      - nitesh-network  # Connect to the custom network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nitesh"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
  
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8041:8001"  # Port for accessing RedisInsight in the browser
    restart: unless-stopped
    environment:
      - REDISINSIGHT_PASSWORD=your_password_here  # Optional: password for RedisInsight login
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 30s
      retries: 3
      timeout: 20s
      start_period: 10s
    depends_on:
      - redis-cache  # Ensures RedisInsight waits for Redis to be available
    networks:
      - nitesh-network  # Connect to the custom network
      
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    container_name: keycloak
    command: start
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KC_DB_SCHEMA: public	
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 9090:8080
    restart: always
    depends_on:
      - postgres
    networks:
      - nitesh-network  # Connect to the custom network
    
  config-server:
    container_name: config-server
    image: 498niteshthakur/config-service-image:latest
    env_file:
      - .env # This passes all variables from .env
    ports:
      - "7001:7001"  # Expose port 7001 of service to 7021 on the host machine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7001/actuator/health"]
      interval: 10s       # Check health every 10 seconds
      timeout: 5s         # Timeout for each health check
      retries: 3          # Mark container as unhealthy after 3 failed attempts
      start_period: 20s   # Wait 20 seconds before starting health checks
    networks:
      - nitesh-network  # Connect to the custom network

  discovery-server:
    container_name: discovery-server
    deploy:
      mode: replicated
      restart_policy:
        condition: on-failure
    image: 498niteshthakur/discovery-service-image:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker  # Set profile to 'docker'
      #- CONFIG_GIT_URI=http://config-server:7021
      #- EUREKA_URI=http://discovery-server:8761/eureka
    ports:
      - "8761:8761"  # Expose port 8080 of service to 8081 on the host machine
    depends_on:
      config-server:
        condition: service_healthy # Wait for Config Server to be healthy before starting
    networks:
      - nitesh-network  # Connect to the custom network

      
networks:
  nitesh-network:  # Define the custom network
    driver: bridge  # Use the default bridge driver
    

